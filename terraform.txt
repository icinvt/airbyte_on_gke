以下は、TerraformのHCL形式で、GKEクラスタ作成とAirbyteデプロイメントを自動化する構成のサンプルコードです。

---

### **1. Terraform構成ファイルの全体構造**
Terraformで以下を構成します：
- **Google Kubernetes Engine（GKE）クラスタ**
- **Kubernetesリソース（Airbyte Helmチャートデプロイ）**

---

#### **`main.tf`**

```hcl
provider "google" {
  project = "orbital-alpha-316500" # GCPプロジェクトID
  region  = "asia-northeast1"
  zone    = "asia-northeast1-a"
}

provider "kubernetes" {
  host                   = google_container_cluster.airbyte-cluster.endpoint
  token                  = data.google_client_config.default.access_token
  cluster_ca_certificate = base64decode(google_container_cluster.airbyte-cluster.master_auth.cluster_ca_certificate)
}

provider "helm" {
  kubernetes {
    host                   = google_container_cluster.airbyte-cluster.endpoint
    token                  = data.google_client_config.default.access_token
    cluster_ca_certificate = base64decode(google_container_cluster.airbyte-cluster.master_auth.cluster_ca_certificate)
  }
}

# GKEクラスタの作成
resource "google_container_cluster" "airbyte-cluster" {
  name     = "airbyte-cluster"
  location = "asia-northeast1"

  initial_node_count = 1

  node_config {
    machine_type = "e2-medium"
    disk_size_gb = 50
  }

  network_policy {
    enabled = true
  }

  addons_config {
    http_load_balancing {
      disabled = false
    }
  }
}

# GKEの認証データを取得
data "google_client_config" "default" {}
```

---

#### **`airbyte.tf`**

```hcl
resource "kubernetes_namespace" "airbyte" {
  metadata {
    name = "airbyte"
  }
}

resource "helm_release" "airbyte" {
  name       = "airbyte"
  namespace  = kubernetes_namespace.airbyte.metadata[0].name
  chart      = "airbyte"
  repository = "https://airbytehq.github.io/helm-charts"

  values = [
    <<EOF
webapp:
  service:
    type: LoadBalancer
EOF
  ]
}
```

---

#### **`outputs.tf`**

```hcl
output "gke_cluster_endpoint" {
  value = google_container_cluster.airbyte-cluster.endpoint
}

output "gke_cluster_name" {
  value = google_container_cluster.airbyte-cluster.name
}

output "airbyte_webapp_external_ip" {
  value = kubernetes_service.airbyte_webapp.status[0].load_balancer[0].ingress[0].ip
}
```

---

### **2. このTerraform構成の使用方法**

1. **Terraform環境を初期化**
   初回のみ、以下のコマンドを実行してTerraform環境を初期化します：

   ```bash
   terraform init
   ```

2. **構成の確認**
   実行するリソースの内容を確認するには次のコマンドを実行します：

   ```bash
   terraform plan
   ```

3. **リソースの作成**
   構成に問題がなければ、以下のコマンドでリソースを作成します：

   ```bash
   terraform apply
   ```

4. **リソースの削除**
   すべてのリソースを削除する場合：

   ```bash
   terraform destroy
   ```

---

### **3. 説明**

- **`google_container_cluster`**: GKEクラスタを構成します。`node_config`でノードのマシンスペックを設定できます。
- **`kubernetes_namespace`**: Kubernetes上の`airbyte`ネームスペースを作成します。
- **`helm_release`**: Helmチャートを使用してAirbyteをデプロイします。ここではWeb UI用のサービスを`LoadBalancer`タイプに設定しています。
- **`outputs.tf`**: リソース作成後に必要な情報（クラスタエンドポイントやAirbyte Web UIの外部IPアドレス）を出力します。

---

このHCLコードを使うと、現在手動で行った作業をTerraformで再現できるはずです。必要に応じてカスタマイズしてください！




====[ エラー対応　]===
`gcloud auth application-default login` コマンドを実行しても、`Invalid JWT Signature` エラーが表示される場合、以下の原因が考えられます。

---

### **考えられる原因**
1. **競合する認証情報**
   環境変数 `GOOGLE_APPLICATION_CREDENTIALS` が設定されており、それが現在の認証プロセスを妨げている可能性があります。

2. **古い認証情報のキャッシュ**
   過去に生成された認証情報が破損している、または無効化されている可能性があります。

3. **サービスアカウントキーの問題**
   使用しているサービスアカウントキーが期限切れ、またはGoogle Cloud IAMポリシーで無効化されている可能性があります。

---

### **解決方法**

#### **1. 環境変数 `GOOGLE_APPLICATION_CREDENTIALS` をリセット**

環境変数に設定された認証情報が問題を引き起こしている場合があります。一時的にこの変数を無効にします。

```bash
unset GOOGLE_APPLICATION_CREDENTIALS
```

その後、再度認証を行います。

```bash
gcloud auth application-default login
```

---

#### **2. 古い認証情報のキャッシュを削除**

古い認証情報を手動で削除し、新しい認証情報を作成します。

1. **キャッシュファイルの削除**
   以下のファイルを削除します：

   ```bash
   rm -rf ~/.config/gcloud/application_default_credentials.json
   rm -rf ~/.config/gcloud/credentials/*
   ```

2. **再ログイン**
   削除後、再度以下を実行します：

   ```bash
   gcloud auth login
   gcloud auth application-default login
   ```

---

#### **3. サービスアカウントキーを再確認**

もし環境変数 `GOOGLE_APPLICATION_CREDENTIALS` を使用してサービスアカウントを設定している場合、キーが有効であることを確認します。

1. **現在のキーを確認**
   IAM & Admin > サービスアカウント > 鍵 でキーが有効であることを確認します。

2. **新しいキーを作成**
   必要に応じて、新しいサービスアカウントキーを作成し、環境変数を更新します。

   ```bash
   export GOOGLE_APPLICATION_CREDENTIALS="/path/to/new-service-account-key.json"
   ```

---

#### **4. Google Cloud CLI を最新バージョンに更新**

CLIツールが古いバージョンのため、認証プロセスが正しく動作していない可能性もあります。以下のコマンドでGoogle Cloud CLIを更新してください。

```bash
gcloud components update
```

更新後、再度以下を実行します：

```bash
gcloud auth application-default login
```

---

### **確認後の再試行**

以上の手順を試した後、以下のコマンドを実行して認証情報が正しく取得できるか確認します：

```bash
gcloud auth application-default print-access-token
```

アクセストークンが正しく出力されれば、問題は解決です。

その後、Terraformのコマンドを再実行します：

```bash
terraform init
terraform plan
terraform apply
```

---

====[ エラー対応　]===
エラーメッセージから、以下の問題が発生していることがわかります：

1. **Helmリリースの失敗**：
   TerraformはAirbyteをHelmでデプロイしようとしましたが、Helmリリースが失敗しました。
   ```
   Warning: Helm release "" was created but has a failed status.
   ```

2. **Kubernetesプロバイダーの問題**：
   Kubernetesプロバイダーの設定で `host` が無効なURLとされています。
   ```
   'host' is not a valid URL
   ```

---

### **解決方法**

#### **1. Kubernetesプロバイダーの設定を確認**
`host` に正しいクラスタエンドポイントが指定されていない可能性があります。

##### 修正例
`google_container_cluster.airbyte-cluster.endpoint` は Terraformで作成したクラスタの情報を使用します。ただし、クラスタがまだ作成されていない場合やエンドポイントが取得できない場合は無効なURLとなります。

以下の変更を適用してエンドポイントを確認してください：

```hcl
provider "kubernetes" {
  host                   = google_container_cluster.airbyte-cluster.endpoint
  token                  = data.google_client_config.default.access_token
  cluster_ca_certificate = base64decode(google_container_cluster.airbyte-cluster.master_auth[0].cluster_ca_certificate)
}
```

#### 確認方法

1. クラスタが作成されているか確認：
   ```bash
   gcloud container clusters list
   ```

2. クラスタのエンドポイントを確認：
   ```bash
   gcloud container clusters describe airbyte-cluster --zone=asia-northeast1 --format="value(endpoint)"
   ```

---

#### **2. Helmリリースの状態を確認**
TerraformのHelmリリースが失敗しているため、Helmコマンドで直接調査します。

##### Helmリリースの状態確認
以下のコマンドを実行してAirbyteのリリース状態を確認します。

```bash
helm list -n airbyte
```

出力に `STATUS` が `FAILED` となっている場合、原因を特定します。

##### Helmリリースの詳細ログ
リリースの詳細情報を確認します：

```bash
helm status airbyte -n airbyte
```

Podの状態も確認します：

```bash
kubectl get pods -n airbyte
kubectl describe pod -n airbyte <POD_NAME>
```

---

#### **3. タイムアウト設定を延長**

Helmリリースのタイムアウトが原因の場合もあります。Helmリリースのリソースにタイムアウト設定を追加してください：

```hcl
resource "helm_release" "airbyte" {
  name       = "airbyte"
  namespace  = kubernetes_namespace.airbyte.metadata[0].name
  chart      = "airbyte"
  repository = "https://airbytehq.github.io/helm-charts"

  values = [
    <<EOF
webapp:
  service:
    type: LoadBalancer
EOF
  ]

  timeout = 600 # タイムアウトを10分に延長
}
```

---

#### **4. Terraform適用の再実行**
エラーを修正した後、以下の手順でTerraformを再実行します：

```bash
terraform apply
```

---

#### **5. 手動でHelmリリースを削除**
もしHelmリリースが失敗してリソースが中途半端に残っている場合、手動で削除してから再実行します。

```bash
helm uninstall airbyte -n airbyte
```

その後、Terraformを再実行します。

---

### **エラーの原因が特定できない場合**
上記の手順で解決しない場合、以下の情報を提供してください：
1. `helm status airbyte -n airbyte` の出力
2. `kubectl get pods -n airbyte` の出力

これに基づいてさらに詳細なトラブルシューティングを進めます！